<table class="table table-hover" width="100%">
  <thead>
    <th width="15%">Home</th>
    <th width="15%">GH</th>
    <th width="5%"> - </th>
    <th width="15%">GA</th>
    <th width="15%">Away</th>
    <th width="20%">Date Played</th>
    <th width="15%"><!-- Actions --></th>
  </thead>
</table>

<script>
  $(function(){
    var stageTable = $('table').DataTable({
      ajax: {
        url: '<%= get_fixtures_season_path(@season) %>'
      },
      columns: [
        { data: 'home' },
        { render: function(){ return '<input id="home_score" class="form-control full-score">' }},
        { render: function(){ return ' - ' }},
        { render: function(){ return '<input id="away_score" class="form-control full-score">' }},
        { data: 'away' },
        { data: { _: null, sort: 'date_played_string.timestamp' } },
        { render: function(data, type, full, meta){ return fixtureAction(full); }},
      ],
      columnDefs: [
        { targets: 5, defaultContent: '<input id="date_played" class="form-control" disabled>' },
        { targets: [1,2,3,6], sortable: false, searchable: false }
      ],
      createdRow: function(nRow, aData){
        $(nRow).data('id', aData.id);
        $('#home_score', $(nRow)).val(aData.home_score);
        $('#away_score', $(nRow)).val(aData.away_score);
        $('#date_played', $(nRow))
          .prop('disabled', false)
          .val(aData.date_played);

        if (aData.user_team_playing || !aData['season_incomplete?']){
          $('#date_played', $(nRow)).val(aData.date_played_string.display);
          $('input', $(nRow)).prop('disabled', true);
        } else{
          initFullScore($('#home_score', $(nRow)));
          initFullScore($('#away_score', $(nRow)));
          
          $('#date_played', $(nRow)).flatpickr({
            altInput: true,
            static: true,
            onChange: function(selectedDates, dateStr, instance){
              $(instance.input).data('origVal') != dateStr ?
                $(instance.altInput).addClass('dirty') :
                $(instance.altInput).removeClass('dirty');

              lastPickedDate = selectedDates[0];
            },
            onOpen: function(selectedDates, dateStr, instance){
              if (lastPickedDate)
                instance.setDate(lastPickedDate, true);         
            }
          });
        }

        saveOrigVal($(nRow));
      },
    })

    $('table').on('input click', 'input', function(){
      triggerTrField(this);
    });

    $('table').on('click', '.update-btn', function(evt){
      var tr = $(this).closest('tr');
      var id = tr.data('id');
      if (id && !$(this).prop('disabled')){
        if (!$('#home_score', tr).val())
          swal('Invalid Fixture', 'Home Score cannot be blank.', 'error');
        else if (!$('#away_score', tr).val())
          swal('Invalid Fixture', 'Away Score cannot be blank.', 'error');
        else if (!$('#date_played', tr).val())
          swal('Invalid Fixture', 'Date Played cannot be blank.', 'error');
        else
          $.ajax({
            url: '/cmsk/fixtures/'+id,
            type: 'PUT',
            data: {
              fixture: {
                home_score: $('#home_score', tr).val(),
                away_score: $('#away_score', tr).val(),
                date_played: $('#date_played', tr).val()
              }
            }
          }).then(function(){
            stageTable.ajax.reload(null, false);
          });
      }

      return false;
    })
  })

  function fixtureAction(fixture){
    var buttonClasses = "button button-small button-block button-raised"

    if (fixture.user_team_playing){
      return fixture.game_exists ?
        "<a href=\"/cmsk/games/"+fixture.game_id+"\" class=\""+buttonClasses+" button-primary\" target=\"_blank\">View Game</a>" :
        "<a href=\"/cmsk/games/new?fixture="+fixture.id+"\" class=\""+buttonClasses+" button-action\" target=\"_blank\">Play Game</a>";
    } else
      return "<button class=\"update-btn "+buttonClasses+" button-highlight\" disabled>Update</button>";
  }  

  function initFullScore(target){
    var _input = $(target);
    var _origVal = $(target).val();

    _input.inputmask({
      mask: "9{1,2}[ \(9{1,2}\)]",
      greedy: false,
      skipOptionalPartCharacter: ' ',
      onBeforeWrite: function(evt, buffer, caretPos, opts){
        (_origVal != buffer.join("")) ?
          _input.addClass('dirty') :
          _input.removeClass('dirty');

        _input.trigger('click');
        return true;        
      }
    });
  }  
</script>