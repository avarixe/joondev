css:
  .ui.buttons .or[data-text]:before { color: dodgerblue }
  .pos.ui.label > i.icon { margin: 0em 0.25em 0em 0.25em }
  a[data-action*="card"] .floating.label { z-index: 1000 }
  a.disabled[data-action*="card"] { color: #e5e5e5 !important; opacity: 1.0 !important; }
  .ui.floating.booking.label { padding: 0.6em; margin: 0 0 0 -2.2em !important; top: 0.45em !important }
  input.rating { min-width: 4em; }
  .player_id { min-width: 12em !important; }

= form_for(@match, as: :match, remote: true, html: { class: 'ui small fluid form' }) do |f|
  = f.hidden_field :motm_id

  - if @match.id.present?
    a.ui.basic.button#view-match View Match

  .ui.teal.raised.segment
    .ui.grid
      .equal.width.columns.row
        .column.required.field[no-empty]
          = f.label :competition, 'Competition'
          = f.select :competition, 
            options_for_select(@season.competition_options, @match.competition),
            { include_blank: true }, { class: 'ui fluid dropdown'}
        .column.required.field[no-empty]
          = f.label :opponent, 'Opponent Team'
          = f.text_field :opponent, list: 'teams', tabindex: 2
          = datalist_tag :teams, @team.teams_played.sort
      .equal.width.columns.row
        .column.required.field[no-empty]
          = f.label :date_played, 'Date Played'
          = f.text_field :date_played, data: { flatpickr: true }
        .column.required.field[no-empty]
          label Home or Away
          .inline.two.fields
            .field
              .ui.radio.checkbox
                = f.radio_button :home, true
                = f.label :home_true, 'Home'
            .field
              .ui.radio.checkbox
                = f.radio_button :home, false 
                = f.label :home_false, 'Away'
      .three.column.centered.row
        .six.wide.column.field[no-empty]
          = f.text_field :score_f, data: { inputmask: "'mask': '9{+}[ (9{+})]', 'greedy': false" }
        .ui.four.wide.center.aligned.column
          label GF - GA
        .six.wide.column.field[no-empty]
          = f.text_field :score_a, data: { inputmask: "'mask': '9{+}[ (9{+})]', 'greedy': false" }

  .ui.orange.raised.segment
    .ui.orange.header Match Log

    .ui.five.basic.icon.buttons
      a.ui.button[data-action="new log" data-tooltip="Substitution" data-inverted]
        i.retweet.icon
      a.ui.button[data-action="new log" data-tooltip="Goal" data-inverted]
        i.green.soccer.icon
      a.ui.button[data-action="new log" data-tooltip="Booking" data-inverted]
        i.orange.clone.icon
      a.ui.button[data-action="new log" data-tooltip="Injury" data-inverted]
        i.pink.first.aid.icon
      / a.ui.button[data-action="new log" title="Opposition Goal"]
        i.gray.soccer.icon

    table#logs.ui.small.definition.unstackable.very.compact.table[width="100%"]
      thead: tr
        th.four.wide Minute
        th.eleven.wide Event
        th.one.wide
      tbody
        = f.fields_for :logs, @match.logs.to_a.unshift(MyFifa::MatchLog.new) do |log_fields|
          = render "log_fields", f: log_fields

  .ui.green.raised.segment
    .ui.green.header Player Performances

    - if @match.id.blank?
      .field
        = f.select :squad_id,
          options_for_select(@team.squads.map{ |s| [s.squad_name, s.id] }),
          { include_blank: 'Squad' },
          { class: 'fluid dropdown' }

    table#players.ui.small.unstackable.very.compact.table[width="100%"]
      thead: tr
        th.five.wide
        th.six.wide Player
        th.center.aligned Rating
      tbody
        - @match.player_records.each do |record|
          = f.fields_for :player_records, record do |record_fields|
            = render 'record_fields', f: record_fields, num_sub: 0, player_is_sub: false

  .ui.horizontal.divider

  = f.submit 'Save Match', class: 'ui primary button'
  = content_tag :button, 'Update Squad', class: 'ui violet button', id: 'update-squad-btn', disabled: true
