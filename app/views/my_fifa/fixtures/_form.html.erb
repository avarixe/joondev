<style>
  .dropdown.player_id .header { color: red !important; }
</style>

<%= form_for(@fixture, html: { class: 'ui small fluid form' }) do |f| %>
  <%= f.hidden_field :fixture_id %>

  <%= render 'fixture_fields', f: f %>

  <div class="ui teal top attached segment">
    <table id="records-table" class="ui table">
      <thead class="thead-inverse">
        <tr>
          <th style="width:15%"></th>
          <th style="width:40%">Name</th>
          <th style="width:15%">Rating</th>
          <th style="width:15%">Goals</th>
          <th style="width:15%">Assists</th>
        </tr>
      </thead>
      <tbody>
        <% @fixture.player_records.each_with_index do |record, i| %>
          <%= f.fields_for :player_records, record do |r| %>
            <tr><%= render 'record_fields', f: r, i: i+3 %></tr>
          <% end %>
        <% end %>

        <tr id="record-template" style="display:none">
          <%= f.fields_for :player_records, MyFifa::PlayerRecord.new do |r| %>
            <%= render 'record_fields', f: r, i: 1000 %>
          <% end %>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="ui two bottom attached buttons">
    <a class="ui teal button" id="add-sub-btn"><i class="plus icon"></i> SUB</a>
    <a class="ui orange button" id="remove-sub-btn"><i class="minus icon"></i> SUB</a>
  </div>

  <div class="ui horizontal divider"></div>

  <%= f.submit 'Save Fixture', class: 'ui primary button', onclick: 'return checkForm()' %>
  <%= content_tag :button, 'Update Squad', class: 'ui violet button', id: 'update-squad-btn', disabled: true %>
  <%= link_to 'Back', my_fifa_fixtures_path, class: 'ui basic button' %>
<% end %>

<script>
  var num_subs = <%= @fixture.player_records.length - 11 %>;

  $(function(){
    // Flatpickr functionality
    $('#my_fifa_fixture_date_played').flatpickr({ altInput: true });
    
    // Score Masking
    $('.score-field').inputmask({
      mask: "9{+}[ (9{+})]", greedy: false
    });
    
    // Click fields functionality
    $('.click-form').each(function(){ toggleClickForm($(this), $(this).hasClass('required')); });
    
    // +/- SUB button functionality
    $('#add-sub-btn').click(function(){ addRecord(); });
    $('#remove-sub-btn').click(function(){
      if (num_subs > 0){
        $('#records-table tbody tr:last').remove();
        num_subs--;
      }
    });
    
    $('#squad').change(function(){
      if ($('#squad').val()){
        $.get("/my_fifa/squads/"+$('#squad').val()+"/players_json", function(data){
          $.each(data.players, function(i, player){
            var tr = $('#my_fifa_fixture_player_records_attributes_'+i+'_pos').closest('tr');
            $('select[id$="player_id"]', tr).dropdown('set selected', player.id);
          });
        });
        $('#update-squad-btn').attr('disabled', false);
      } else
        $('#update-squad-btn').attr('disabled', true);
    });

    $('#update-squad-btn').click(function(evt){
      evt.preventDefault();

      var squadId = $('#squad').val();
      var rows = $('#records-table tbody tr');
      var squadParams = {};
      for(var i=0; i < 11; i++)
        squadParams['player_id_'+(i+1)] = $('.player_id', $(rows[i])).val();

      $.ajax({
        url: '/my_fifa/squads/'+squadId,
        type: 'PUT',
        beforeSend: function(xhr){ xhr.setRequestHeader('X-CSRF-Token', '<%= form_authenticity_token %>')},
        data: { squad: squadParams },
        statusCode: {
          500: function(){ swal('Error', 'Attempt to update the Squad failed.', 'error'); }
        }
      }).then(function(){
        swal('Success', 'Squad has been updated to the current lineup.', 'success');
      });
    });
  });

  function checkForm(){
    if (!$('#my_fifa_fixture_opponent').val())
      return error_alert('Please enter an Opponent Team.')  
    else if (!$('#my_fifa_fixture_competition').val())
      return error_alert('Please enter a Competition.')
    else
      return true;
  }
  
  function toggleClickForm(target, required=false){
    $(target).click(function(){
      var value = parseInt($(target).val(), 10);
      $(this).val(isNaN(value) ? 1 : value+1);
    });
    $(target).contextmenu(function(event){
      event.preventDefault();
      var value = parseInt($(target).val(), 10);
      $(this).val((isNaN(value) || value == 1 || value == 0) ? (required ? 0 : null) : value-1);
    });
  }

  function addRecord(){
    var id = moment().valueOf();

    // Generate new Record table row
    var record = $('<tr/>');
    record.append($('#record-template').html()
      .replace(/fixture\[player\_records\_attributes\]\[\d+\]/g, 'fixture[player_records_attributes]['+id+']')
      .replace(/fixture\_player\_records\_attributes\_\d+/g, 'fixture_player_records_attributes_'+id));
    $('.pos', record).val('SUB '+(++num_subs));

    // Append new row to table
    $('#records-table tbody').append(record);

    // Activate jQuery event listeners
    $('.click-form', $(record)).each(function(){
      toggleClickForm($(this));
    });
  }  
</script>